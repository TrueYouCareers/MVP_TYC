from pydantic import BaseModel, Field
from typing import Dict, Any, Optional
from datetime import datetime


class QuestionnaireSubmission(BaseModel):
    """DTO for submitting questionnaire responses - NO LLM profile required"""
    user_id: str
    education_level: str
    raw_responses: Dict[str, str]  # Changed from Any to str for answer keys
    # Optional: full question data for better LLM processing
    questions_data: Optional[Dict[str, Any]] = None
    # Removed llm_profile - this will be generated by backend


class QuestionnaireInDB(BaseModel):
    """Complete questionnaire data stored in MongoDB"""
    user_id: str
    education_level: str
    raw_responses: Dict[str, str]
    llm_profile: Dict[str, Any]  # Generated by backend
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    id: str = ""  # MongoDB document ID - will be set when retrieved


class QuestionnaireResponse(BaseModel):
    """Response DTO after successful questionnaire submission"""
    message: str
    id: str
    llm_profile: Dict[str, Any]  # Return the generated profile


class ProfileUpdateData(BaseModel):
    llm_profile: Dict[str, Any]
